version: '3.8'

services:
  app:
    build:
      dockerfile: Dockerfile
      context: .
      # Only will build development stage from our dockerfile
      target: development
    volumes:
      - .:/usr/src/app
    env_file:
      - .env
    command: npm run start:dev
    ports:
      - 4000:4000
    depends_on:
      - postgres
    networks:
      - banknet
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:4000/ || exit 1']
      interval: 1m
      timeout: 10s
      retries: 3

  postgres:
    container_name: bank-rdb
    image: postgres:16-alpine
    environment:
      - POSTGRES_USER=theo
      - POSTGRES_PASSWORD=bank
      - POSTGRES_DB=bank-nest
    ports:
      - 5432:5432
    volumes:
      - postgresbankdata:/var/lib/postgresql/data
    networks:
      - banknet

  redis:
    container_name: bank-redis
    image: redis:latest
    restart: always
    ports:
      - 6379:6379
    networks:
      - banknet

    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server --appendonly yes
    volumes:
      - redis.conf:/etc/redis/redis.conf

  kafka:
    image: confluentinc/cp-kafka:latest
    ports:
      - 9092:9092
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - banknet

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - banknet

volumes:
  redis.conf:
  postgresbankdata:
networks:
  banknet:
